# ## Quiz_1
#
# 1) Как понять, что домашка пришла?
# - Заходим в home work и в чате будет написано сообщение в котором указан мой ник и фраза:"прими пулл"
#
# 2) Как принять домашку?
# - Заходим в github desctop и нажимаем на fetch origin,затем зашли в History посмотрели коммиты,верхние самые свежие, и
# открываем VSCode, заходим в 2 листочка, создаем новый фал(листочек с плюсиком), пишем название файла и формат файла, при работе с кодом выбираем интерпретатор
#
# 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
# - В History мы смотрим коммиты. View on Github:переходв Github
#
# 3.1) Где брать сылку на коммит? куда её отправлять?
# - Заходим в кошку, в Changes должно быть отобажение изменений моего репозитория, нашли файлы в которых делали ДЗ, далее пишем название коммита(в названии коммита пишем то что делали в ДЗ), далее нажимаем commit to main, мосле делаем push origin, в history увидим что  мы отправили коммит, нажимаем правой кнопкой на него и кликаем по View on Github, сверху копируем сылку нашего коммита и отправляем его в чат Homework написав "коммит отдал" и вставляем сылку
#
# 4) Что такое файл лога?
# - Этот файл нужно заполнять в конце каждого урока, пишем дату урока и что запомнили в течении урока. Формат markdown
#
# 4.1) Когда нужно его пушить?
# - Когда нужно обновить репозиторий в Github
#
# 5) Что такое интерпритатор?
# - Программа которая читает и запускает наш код
#
# 6) Где можно выбрать интерпритатор?
# - При запуске кода автоматически попросит выбрать интерпретатор, если он не выбран, либо справа сверху base, или ctrl+shift+P
#
# 7) Что такое модуль?
# - Это файл формата .py или .ipynb
#
# 8) Как создать и отправить коммит?
# - Заходим в кошку, в Changes должно быть отобажение изменений моего репозитория, нашли файлы в которых делали ДЗ, далее пишем название коммита(в названии коммита пишем то что делали в ДЗ), далее нажимаем commit to main, мосле делаем push origin, в history увидим что  мы отправили коммит.
#
# 9) Как посмотреть что коммит точно отправлен и находится в github?
# - В history увидим что мы отправили коммит, нажимаем правой кнопкой на него и кликаем по View on Github и переходим на сайт github где можно проверить что коммит пришел.
#
# 10) Какая команда показывает что код не прошёл проверки на ошибки?
# - pre-commit run --all-files
#
# 10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
# - Pylint проверяет код на наличие различных проблем, включая синтаксические ошибки, потенциальные ошибки, неиспользуемые переменные и несоответствия стилю.
# - nbqa-pydocstyle следит за описанием документирующих строк и их арфографией.
#
# 11) Как узнать какой именно линтер не прошёл проверку?
# - В командной строке будет описано какие линтеры не прошли проверку фразой"Failed" и ниже подробное описание ошибки.
#
# 12) Линтер Pylint видит markdown?
# - Нет.
#
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
# - Да, расхождения будут так как линтеры не видят marcdown ячейки
#
# 14) Где посмотреть номер ячейки в vscode?
# - Снизу указан номер ячейки Cell
#
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
# - .ipynb отправляется только в формате JSON
#
# 16) Где посмотреть в какой ячейке ошибка?
# - При возникновении ошибки будет строка в которой после слова cell_1:0:0 цифры укажут номер ячейки,строки
#
# 17) Как запустить терминал?
# - Сверху есть кнопка Terminal->New terminal либо ctrl+`
#
# 18) Что такое линтер?
# - Это программа которая проверяет наш код на корректность
#
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
# - https://pylint.pycqa.org
#
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок  в каком линтере?
# - когда закрыли ошибки по Pylint
#
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
# - Часть текста которое описывает что происходит в самом модуля(описание выполение части кода, описание какая информация находится в модуле) и она должна соответствовать информацию о том что находится в модуле
#
# 21) С какой  git команды начинается утро программиста?
# - git pull
#
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
# - нажимаем правой кнопкой мыши Current repository и в всплывающем окне нажать на Open in Visual Studio Code.
#
# 23) Что такое stash?
# - Эта фраза означаен несколько человек работают в одном файле и гитхаб просит вас сохранить изменения в буфер обмена
#
#   Общее объяснение концепции.
# 23.1) Как сохранить стэш?
#   git командa(подсказка: https://t.me/c/1937296927/3602/19531):
#   - git stash save "NAME_STASH"
#
#   Кнопка в vs code:
#
# 23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:
# - Stashed chanqes->restore
#
#       git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:
#       - git stash apply "NUMBER_STASH"
#
# 23.3) Различие между стэшем и коммитом.
#   Когда лучше сохранить изменения в стэше, а когда коммитить.
# - Коммит это фиксированное изменение которое видны другим разработчикам, а Стэш это временное сохраниение некоммиченых изменений.
# - Изменения в Стэше лучше сохранять когда ты не уверен что хочешь коммитить данные но при этом ты так же не хочешь их терять. Грубо говоря Стэш это как черновик, а Коммит это как запись в журнал которая останется навсегда.
#
# 23.4) Как просмотреть список сохраненных стэшей?
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#   - git stash list
#
# 23.5) Как удалить стэш?
#   Команды для удаления отдельных стэшей или всех сразу.
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#   - git stash drop-удаляет последний стэш, если не указан конкретный, а git stash clear очищает все стэши.
#
# 23.6) Практические примеры использования стэша.
#   Краткие сценарии, где стэш помогает.
# - Работа в общей ветке (когда несколько разработчиков работают в одной ветке)
# - Тестирование новых идей(Когда хочется попробовать новуб идею но нет уверености стоит ли её комитить)
#
# 24) Где посмотреть что есть конфликт в файлах?
# - В Githab desctop на файле, где есть конфликт будет восклицательны знак(Conflicted), нажимаем правой кнопкой мыши и открываем файл в VCCode
#
# 24.1) Когда он появляется?
# - Когда мы востанавливаем свои изменения гит не понимает какие изменения нжно сохранить, ваши, ини те которые пришли с интернета, поэтому возникает конфликт.
#
# 25) Как решить конфликт в файлах?
# - Если нажать Accept current changes - примется то что пришло с интернета(зеленая строка),Accept incoming changes - примет локальное изменение на компьютере(синие строки),Accept both changes - принимает оба изменения. Так решится конфликт.
#
# 26) Напишиие правильное утверждение
# -Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения
# - ОТВЕТ:(Зелёное то что пришло с гитхаба и синее локальные изменения)
#
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
# - Да, после того как вы спрячете свои изменения в stash, можно спокойно выполнить git pull для получения изменений из удаленного репозитория. Спрятанные изменения не будут мешать процессу обновления локального репозитория.
#
# 27.1) Что может произойти когда stash восстановите после принятия pull?
# - При восстановлении stash после принятия pull могут возникнуть конфликты, если изменения в stash затрагивают те же строки, что и изменения, полученные с удаленного репозитория.
#
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
# - 3 способа:
#     - Accept current changes - примется то что пришло с интернета(зеленая строка)
#     - Accept incoming changes - примет локальное изменение на компьютере(синие строки)
#     - Accept both changes - принимает оба изменения
#
# 29) Что делает кнопка complete merge?
# - Подтверждает изменения
#
# 30) В какой чат нужно писать если остались вопросы?
# - Help me
# 31) Что такое FORK? Зачем его делают?
# - Позволяет копировать чужой репозиторий и делать его личным. Это нужно чтобы свободно взаимодействовать с ним, менять код, удалять или добавлять что либо.
#
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
# - Заходим в кошку и слонируем этот репозиторий себе на локальный компьютер. Clone repository... -> (выбираем репозиторий из списка) -> clone
#
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
# - С 90% вероятностью были решены другими студетнами либо преподавателем(со временем вероятность повышается)
#
# 34) Как создать файл в vs code?
# - В Explorer наводим на название проекта и нажимаем на листок с плюсом New file, пишем имя файла и формат
# - Сверху нажимаем File -> New file
# - Нажимаем в First_progect на пустое место и будет надпись New file
#
# 35) Файл лога нужно заполнять в конце каждого урока?
# - Да

# ## Quiz_2
# 1. Как включить автосохранение данных в VSCODE?
# - Сверху нажимаем File -> Auto Save
#
# 2. Как настроить перенос строки?
# - заходим file -> preferences -> Settings -> вводим в поиске wrap -> editor:WorldWrap выставляем WorldWrapColumn -> editor World Wrap Column выставляем значение 79.
#
# 3. Сколько символов по pep8 разрешено на строке?
# - 79 символов
#
# 4. Какие способы переноса строк показаны в видео:
# - создать файл формата .py и в ней, когда вставим строку, снизу будет показана длина строки.
# - использовать коментарии разбивая запись на несколько решеток.
# - Если написан код и в нем слишком длинная строка, просто оборачиваем в скобки и переносим на следующую строку.
# - если сама надпись большая мы можем разорвать её и присвоить им несколько переменных, а затем сконкатинировать их.
#
#
# 4.1 Строки с использованием обратного слэша (\)
#
# string_continued = "This is a long string that we want to " \
#                    "split across multiple lines."
# print(string_continued)
#
# 4.2 Тройные кавычки (''' или """)
#
# multi_line_string = """This is a string that spans
# multiple lines. You can write freely
# and it will keep the line breaks."""
# print(multi_line_string)
#
# 4.3 Создание списка строк и объединение с помощью join
#
# strings = [
#     "This is the first line.",
#     "This is the second line.",
#     "This is the third line."
# ]
# result = "\n".join(strings)  # Используем перенос строк '\n'
# print(result)
#
# 4.4 Использование круглых скобок для продолжения строки
# long_string = (
#     "This is a very long string that I would like to "
#     "continue on the next line."
# )
# print(long_string)
#
# 4.5 Форматированные строки (f-строки) с использованием скобок
# letter_a = 5
# letter_b = 6
# product_ab = letter_a * letter_b
#
# message = (
#     f"when {letter_a} is multiplied by {letter_b}, "
#     f"the result is {product_ab}"
# )
# print(message)
#
# 4.6 Сложение строк с помощью +
#
# string_part1 = "This is the first part, "
# string_part2 = "and this is the second part."
# full_string = string_part1 + string_part2
# print(full_string)
#
# 5. Проверка на ошибки c помощью кнопки problems, где она находится?
# - Вкладка Problems находится на панели терминала. В этой вкладке находятся все ошибки, если мы нажмем на любую ошибку, её перебросит в файл в котором подробно она описана.
#
# 6. Где в vscode находится клиент гита? как в нём отправить коммит? как принять домашку?
# - На панеле сбоку есть три круглишка (Sourse control) нажмём и перейдем и провалимся в comits. Там можно отправлять коммиты (кнопка push), принимать ДЗ(кнопка Pull).
#
# 7. Что такое GIT? он локальный? В нём можно посмотреть историю изменений файлов и вернуться к любому коммиту?
# -  Git это система контроля версий.
# - Да, Git локальный.
# - Да, в нём можно посмотреть историю изменений файлов и вернуться к любому коммиту.
#
# 8. Как вставить картинку в маркдаун?
# - ctrl+V, так же можно менять размер картинки с помощью тэгов.
#
# 9. Где посмотреть длину строки в vs code?
# - Создать файл формата .py и в ней, когда вставим строку, снизу будет показана длина строки.
#
# 10. Как поменять тип ячейки с питона на маркдаун?
# - В ячейке снизу справа нажимаем на надпись python и выбираем markdown.
#
# 11. Как запустить сразу все ячейки в юпитере?
# - Сверху на панеле есть кнопка Run All, она запускает все ячейки.
#
# 12. Как изменить размер картинки в юпитере? Нужно для этого знать HTML?
# - Можно менять размер картинки с помощью тэгов. Базовых знаний достаточно.
#
# 13. Какой хоткей чтобы запустить ячейку с смещением на следующую?
# - shift+enter
#
# 14. Как включить отображение номеров строк в юпитере(Cell line numbers)?
# - В ячейке сверху справа нажимаем на "..." и выбираем Show Cell Line Numbers, либо выбираем всю ячейку и нажимаем L.
#
# 15. Что такое "Go To" чем это полезно? Как перейти сразу на ошибочную ячейку?
# - Кнопка, при нажатии которой сразу перебрасывает на ячейку с ошибкой.
#
# 16. Как очистить вывод ячеек которые уже запущены?
# - Рядом с Run All есть клавиша Clear All Outputs
#
# 17. Как работать одновременно в нескольких файлах в VSCODE? Что такое SPLIT?
# - Split Editor дублирует экран что позволяет работать в нескольких файлах, в нескольких проектах.
#
# 18. Каким сочетанием убирается левый сайдбар?
# - Сверху справа есть бело-черный квадрат(Toggle Primary Side bar),либо ctrl+b.
#
# 19. Кнопка два листочка это наши локальные файлы?
# - Да
#
# 20. Какая ошибка появилась в трассировке при запуске всех ячеек DICT или LIST?
# - Name Error: name 'Dict' is not defined(имя 'dict' не определено). Это происходит потому что Python не распознает Dict и List как типы по умолчанию, они являются частью typing модуля, который обеспечивает поддержку подсказок типов. Чтобы использовать Dict и List в аннотациях функций, нам нужно импортировать их из typing модуля.
#
# 21. Вы ознакомились с https://t.me/c/1937296927/832/19307? и ttps://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet?
# - Да
#
# 22. Что такое валидация?
# - Процес проверки на соответствие определенным требованиям.
#
# 23. Что такое трассировка ошибки?
# - Это процесс отслеживания и анализа ошибки для её выявления и исправления.
#
# 24. Что значит отвалился интерпритатор?
# - Означает что программа котрая занимается выполнениемм кода больше не работает.

#
